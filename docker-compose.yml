---
version: '2'
services:
  # Container for Source Interface web view. Does not connect to any other
  # services, just needs the SecureDrop data and code directories mounted.
  app-source:
    # Using both "build" and "image" directives causes docker-compose
    # to generate a single image that gets reused between services,
    # dramatically reducing runtime of `docker-compose build [--no-cache]`.
    build:
      context: ./
      dockerfile: dockerfiles/securedrop-dev
    image: securedrop-development
    ports:
      - "8080:8080"
    environment:
      SECUREDROP_ENV: dev
    volumes:
      - ./securedrop:/securedrop
      - securedropdata:/var/lib/securedrop
    working_dir: /securedrop
    command: python source.py


  # Container for Journalist Interface web view. Connects to redis queue, and
  # depends on redis worker even though it queues connect directly to it.
  app-journalist:
    build:
      context: ./
      dockerfile: dockerfiles/securedrop-dev
    image: securedrop-development
    ports:
      - "8081:8081"
    volumes:
      - ./securedrop:/securedrop
      - securedropdata:/var/lib/securedrop
    working_dir: /securedrop
    environment:
      SECUREDROP_REDIS_SERVER: redis
      SECUREDROP_ENV: dev
    command: python journalist.py
    depends_on:
      - redis
      - redisworker

  # Container for Redis server. Used for tracking asynchronous jobs delegated
  # from the Journalist Interface app, e.g. secure-deleting source directories.
  redis:
    image: redis
    expose:
      - "6379"

  # Container for Redis Queue worker. Used for handling jobs dispatched from
  # the Journalist Interface app to the Redis server. The worker connects
  # to the Redis server container and handles the work. Therefore requires
  # mounts for SecureDrop data and code directories.
  redisworker:
    build:
      context: ./
      dockerfile: dockerfiles/securedrop-dev
    image: securedrop-development
    volumes:
      - ./securedrop:/securedrop
      - securedropdatatesttmp:/tmp
    command: >
      rqworker test
      -P /securedrop
      -u http://redis:6379
    environment:
      SECUREDROP_ENV: test
      SECUREDROP_REDIS_SERVER: redis
    depends_on:
      - redis

  # Container for running the unit and integration tests for the application
  # code, both Source and Journalist Interfaces.
  app-test:
    build:
      context: ./
      dockerfile: dockerfiles/securedrop-dev
    image: securedrop-development
    volumes:
      - ./securedrop:/securedrop
      # Don't mount volume
      # - securedropdata:/var/lib/securedrop
      # Need more entropy in container for crypto calls
      - /dev/urandom:/dev/random
      - securedropdatatesttmp:/tmp
    # Omit "command" since we just want the container present in order to run
    # tests. Bringing the containers up shouldn't trigger a test run.
    environment:
      SECUREDROP_ENV: test
      SECUREDROP_REDIS_SERVER: redis
      #    PYTEST_DEBUG: 1
    depends_on:
      - redis
      - redisworker

volumes:
  # Create a common volume for mounting in both app containers,
  # so the same database file is used for Source and Journalist.
  securedropdata: {}
  securedropdatatesttmp: {}
